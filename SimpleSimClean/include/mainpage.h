 /***************************************************************************
 *   Copyright (C) Minister of Natural Resources Canada 2008.              *
 *   hseywerd@nrcan.gc.ca                                                  *
 *                                                                         *
 ***************************************************************************/
/**
 * \file mainpage.h
 * \brief Main documentation page for SimpleScintillator
 *
 * @date 2008/12/08
 **/

/** @mainpage Documentation Page for SimpleScintillator
*
* @authors HCJ Seywerd hseywerd@nrcan.gc.ca
*
* @section intro Introduction
* This is a simple Geant4 simulation of a scintillator and its readout system.
* It provides for various scintillators including:
*
* -# Sodium Iodide (NaI)
* -# Lanthanum Bromide (LaBr3)
* -# Calcium Fluoride (CaF2)
* -# Plastic Scintillator (PVT)
* -# Lutetium Ytrium Orthoscillicate (LYSO)
*
* Readout using two models is provides:
* -# Conventional Vacuum Photomultiplier (PMT)
* -# Silicon Photomultiplier (SiPM -SensL and Hamamatsu variants)
*
* @section root Root Output
* Output is provided in a Root format file where output data is stored within objects derived from the
* Root TObject class. This provided not just for data storage but also for an interface to the data storage
* object which encapsulates the data and allows for extensibility with a smaller chance of breaking existing programs.
* Reading the data within Root requires loading of a shared object library (.so file), see the test.cpp file for an example.
*
* @section eVGen Event Generation
* Event generation can be performed using the standard Geant4 generators or using the G4LECS generators for low
* energy events. By default the G4LECS package is used. This can be overwritten with the /ComptonImager/PhysicsList/G4LECS card.
* See class documentation of CIPhysicsListMessenger for details.
*
* The input particle is a single gamma of energy set by the /ComptonImager/PrimaryGenerator/GammaEnergy card. See documentation
* CIPrimaryGeneratorMessenger for details.
*
* A future release will also implement a parameterised generator for gammas from Naturally Occurring Background Radiation (NORM)
*
*
* @section req Requirements
* Prior to attempting to install the package, Geant4, CLHEP, and Root must be installed.
*
* The following environment variables need to be correctly defined to use the system.
* - CLHEP_INCLUDE_DIR
* - G4INCLUDE
* - ROOTSYS
* - CLHEP_LIB_DIR
* - G4LIB
* - LD_LIBRARY_PATH needs to be correctly set up to include the location of the shared object libraries
*
* Development has been performed with Geant libraries built in DEBUG mode.
* Switching between debug and release versions requires changing the
* library environment variables appropriately
*
* @section build Building the program
* I have been using the Eclipse Integrated Development Environment for preparing the system.
* This is however, not required. Among other things Eclipse looks after generation of the makefiles, so
* the makefiles included with the package may look a bit odd, as they have been autogenerated.
* They may be used outside the Eclipse environment.
*
* The system is predicated on a directory structure, based around a top level directory and several subdirectories
* - src contains the source files
* - include contains the include files
* - Debug contains the makefiles and configuration for a debug version of the program
* - Release contains the makefiles and configuration for a release version of the program
* - extras contains a number of other helper files, these may need to be moved for building and using the program
*
* Building the program in Debug and Release versions is done with the configurations in the Debug
* and Release subdirectories respectively. Each configuration has a set of makefiles.
* In addition two files makefile.defs and makefile.targets (placed in the extras directory are needed to
* set up the construction of the shared object library required for the interface to Root. These should be placed in the
* main directory.
*
* To build download the sources from the subversion repository.
* Move files as indicated above.
* cd to the Debug or Release directories
* run make
* This should build the system.
*
* @section run Running the Program
* Two macro files are provided as examples:
* - run.mac sets the configuration
* - vis.mac sets the visualization options
* To run enter
* SimpleSim run.mac
*
*
* @section exoutput Examining Output with Root
* Output will be sent to a root file whose name is determined from the card in the run.mac file:
* /ComptonImager/RunAction/RootOutputFile CIAAAout.root
* This may be read and histograms produced using as an example test.cpp as a Root macro.
*
*
* @section modInstruction Modifications
* For most purposes the user will have to modify only the detector construction class to implement different detector geometries.
* In the example this is called SimpleScintillatorDetectorConstruction; it is probably wise to give it a new name, in which case
* the main program in SimpleScintillator.cpp needs to be changed as well. Extensions to output data can be made by
* modifying CIEventAction. Changes to Root output require a rebuild of the libEvent.so shared library, which
* should be looked after by the makefile.
* It may also be necessary to extend the material and detector sensitivity setup in CIMaterials.
*
* @section codeConv Coding Conventions
* @subsection nameConv Naming Conventions
* -  Classes common to the framework start with the letters CI
* -  Method names are capitalized
* -  Variable names begin with a lower case letter
* -  Member variables are prepended with m_
* -  Member variables for simple types should be prepended, in addition, with a type indicator m_i for ints, m_d for double, and
* for pointers to types m_pd, m_pi, etc. The indicator part is then capitalized, e.g. m_dEnergy.
*
* @subsection constConv Constants
* Attempt not to use numerical or string constants in the code. Declare a name and a ensure the variable is declared const, e.g.
* const double pi=3.14159;, or const std::string name="TheName"; If these are also member variables, it may also be
* useful to declare them as static and define them in the body of the implementation
*
* @subsection EncapConv Encapsulation
* Try and encapsulate as much as possible. One annoyance in Geant4 is that enums are often declared global, (for example in
* the class G4OpBoundaryProcess, various boundary status indicators are declared globally polluting the global namespace).
*
* Try to access variables through inline getters and setters, performance penalty is nil and this allows implementation changes
* which are transparent to dependent code.
*
* In headers try to use forward declarations rather than multiple includes, i.e. if there is a member variable G4XXX* m_pXXX,
* declare class G4XXX; at the top of the header file, you don't need to include G4XXX in the header
* (though it is required in the implementation).
*
* @subsection commentConv Commenting
* Comment classes, methods and attributes in the header file using the DOxygen formatting, good examples using
* different styles is this file (mainpage.h) and CIMaterials.h. DOxygen documentation can be viewed at http://www.doxygen.org/
* DOxygen can handle comments placed both in header and implementation files but it is nice to be
* consistent and use the header file.
*
*
*
* @section Updates Updates
* @subsection May0109 Version of May 01 09
* This version includes the following changes
* - Corrected track process origin error
* - Added track energy, track ID, and depositor process name to the event record
* - Added ability to reject events without coincidences use the card "/ComptonImager/EventAction/RequireCoincidence true"
* - Note that optical processes can be suppressed for faster running with "/ComptonImager/PhysicsList/OpticalProcesses false"
* - Furthermore output of optical photons can be suppressed by "/ComptonImager/EventAction/SaveOpticalPhotonHits false"
* - There is a proposal for a run header including Pat's list of items in CIRootRunHeader, please comment before I implement this.
* - Improvements to the SiPM model, corrections to its geometry - see FullDetectorConstruction.cpp - note that this has not yet been
* back propagated to SimpleScintillatorDetectorConstruction and CIDOIDetectorConstruction.
* - Improvements to modeling of optical reflectivity, though I am not sure it is fully correct yet
* - Implementation of a multi-pixel scatter+absorber detector with SiPM readout see FullDetectorConstruction
* - Small reorganization of the repository
* - The new vis.mac file has colours set so that optical photons are yellow, gamma's green, and electrons cyan; energy
* deposits in the scintillator are blue and hits in the photodetector red.
*
* @subsection Sept09 Version of September 1 09
* This version includes the following changes
* - Correction of a bug and additional information is stored in the CIModuleTable
* - Rearrangement of the geometry into several classes: CIPhotoDetector - a base class for photosensitive detectors,
* CISiPM to model a silicon photomultiplier, CellVolume to represent a cell
* containing crystal and SiPM, FullDetectorConstruction refined to use the above mentioned classes, and a new class FullDetectorConstructionMessenger
* which allows detector geometries to be defined on the command line, rather than in code.
* - CIEventAction and CIRunAction were modified to allow writing of data in ASCII format files, a bug resulting in multiple storage of
*  all events was corrected, a class for storage of cell summed data was added, new histograms added.
* - CIMaterials - some corrections, added material for wavelength shifter.
* - CIOutputEvent, CIOutputHit, CIOutputScintiHit, CIOutputSummedHit modified/added to provide additional information and compilable funtions
* - CIPhysicsList - added wavelength shifter optical process, should consider provision to allow new Geant Low Energy Electromagnetic Processes rather than
* the now unsupported G4LECS
* - CIPrimaryGenerator, CIPrimaryGeneratorAction - completed implementation of generation of primaries via G4GeneralParticleSource much more
*  flexible than G4ParticleGun, which is now deprecated and will be removed in a later release.
* - CISensitiveScintiDetector - corrected bug (Jojo)
* - CIPMT, TestPMT classes - base class and specialisation for vacuum photomultipliers
*
*
*
* Items under development/planned:
* - Creation of a photodetector class and subclasses for SiPM and PMT, current implementation is unsatisfactory.
* - Digitization
* - Addition of SiPM dark rate noise
* - Modeling of avalanche and quench processes in the SiPM
* - Modeling of integration and signal management for timing and energy measurement optimization
* - Parallelization to run on multi-core CPU's
*
*
*/
